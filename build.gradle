plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id 'org.gradle.test-retry' version '1.0.0'
}

group = 'happiness-index'
version = 'dev'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.72'
    implementation 'com.github.DaikonWeb:daikon-lambda:1.4.0'
    implementation 'com.github.DaikonWeb:daikon-gson:1.4.0'

    implementation platform('software.amazon.awssdk:bom:2.5.29')
    implementation 'software.amazon.awssdk:s3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    testImplementation group: 'io.mockk', name: 'mockk', version: '1.10.0'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.15.0'
    testImplementation "io.rest-assured:rest-assured:4.3.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

build.finalizedBy(shadowJar)

String env = project.hasProperty('stage') ? project.property('stage') : 'dev'

test {
    println("#### ENVIRONMENT: " + env + " ####")
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

task acceptanceTest(type: Test) {
    environment('CURRENT_ENVIRONMENT', env)
    useJUnitPlatform()
    include 'happiness/uat/**'
    retry {
        failOnPassedAfterRetry = false
        maxRetries = 5
    }
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
}

task unitTest(type: Test) {
    environment('CURRENT_ENVIRONMENT', env)
    useJUnitPlatform()
    exclude 'happiness/uat/**'
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
    }
}

task deploy(type: Exec, dependsOn: 'shadowJar') {
    commandLine 'serverless', 'deploy', '--stage', env
}

task localDependencyDeploy(type: Exec, dependsOn: 'shadowJar') {
    commandLine './node_modules/serverless/bin/serverless', 'deploy', '--stage', env
}

task remove(type: Exec) {
    commandLine 'serverless', 'remove'
}

